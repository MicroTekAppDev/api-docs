## Authentication

All Attune API requests require authentication.

1. [Acquire an access token](#api-reference-authentication-acquire-an-access-token)
2. [Use the access token to make authenticated requests](#api-reference-authentication-authenticating-requests)

### Acquire an Access Token

> Request:

```shell
curl -X POST \
  https://idp.attune.com/connect/token \
  -H 'content-type: x-www-form-urlencoded' \
  -H 'cache-control: no-cache' \
  -d 'client_id: {YOUR_CLIENT_ID}' \
  -d 'client_secret: {YOUR_CLIENT_SECRET}' \
  -d 'grant_type: client_credentials' \
  -d 'scope: public-api'
```

```csharp
var client = new RestClient("https://idp.attune.com");
var request = new RestRequest("connect/token", Method.POST);
request.AddHeader("content-type", "content-type: x-www-form-urlencoded");
request.AddHeader("cache-control", "no-cache");
request.AddParameter("client_id", "{YOUR_CLIENT_ID}", ParameterType.RequestBody);
request.AddParameter("client_secret", "{YOUR_CLIENT_SECRET}", ParameterType.RequestBody);
request.AddParameter("grant_type", "client_credentials", ParameterType.RequestBody);
request.AddParameter("scope", "public-api", ParameterType.RequestBody);
var response = client.Execute(request);
```

> Response:

```
200 OK
```

```json
{
    "access_token": "{YOUR_TOKEN}",
    "expires_in": 3600,
    "token_type": "Bearer"
}
```

Acquiring an access token is a two-step process:

1. Signup for a Attune developers account by contacting your account manager
2. Call our secure token service for an access token

<api>`POST https://idp.attune.com/connect/token`</api>

##### Request arguments

Parameter | Type | Description
--------- | ---- | -----------
client_id **required** | *string* | Your client id
client_secret **required** | *string* | Your client secret
grant_type **required** | *string* | Use "client_credentials"
scope **required** | *string* | Use "public-api"

### Authenticating Requests

All requests must be authenticated with an access token supplied in the Authorization header using the Bearer scheme. Your client application may only have one active access token at a time. Acquiring a new access token will invalidate any other token owned.

The request header will look like this: **Authorization: Bearer {YOUR_TOKEN}**

### Refreshing Access

To limit the window of opportunity for attackers in the event an access token is compromised, access tokens expire after a set amout of time. To gain long-lived access to your account, it's necessary to "refresh" your access when it expires. Refreshing an access token will invalidate the previous token, if it is still valid.

<aside class="warning">
  Access tokens must not be visible/available in public (widget integration code, client-side JavaScript, etc.).
</aside>